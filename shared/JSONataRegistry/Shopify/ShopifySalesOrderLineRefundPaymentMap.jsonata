(
  /*
    Desc: Shopify Sales Order Mapper
    Author: Kurt Maile
    Status: In Dev
    Exclude Filter: test = true (.e dont map) - we need to ignore 'test' events
    Other Comments:

    Links:
      Order Events: https://shopify.dev/docs/api/admin-rest/2023-01/resources/event#order-events
      Order Entity: https://shopify.dev/docs/api/admin-rest/2023-01/resources/order
      Draft Order Entity: https://shopify.dev/docs/api/admin-rest/2023-01/resources/draftorder

    Todo:
     Look at the actual event resource itself not just the Order resource.

  */

  $upperTrim := $string ~> $trim ~> $uppercase;
  $cleanStr := $string ~> $trim;
  $stringBoolMap := {"Y":"Y","1":"Y","TRUE":"Y","N":"N","0":"N","FALSE":"Y"};
  $stringBool := function($value){$lookup($stringBoolMap, $upperTrim($value))};
  $buildEntityID := function($entityCode,$system,$rawEntityId){$replace($entityCode,".","_") & "_" & $system & "_" & $rawEntityId};
  $buildAttributeID := function($entityID,$AttributeCode,$AttributeId){$entityID & "_" & $replace($AttributeCode,".","_") & ($AttributeId = "" ? "" : "_" & $AttributeId)};

 
  /* ------------ START OF RAW INPUT DATA ------------ (Injected inn e.g Go / Dataform supplied) */
  
  /* Raw input data (injected config) enabling xdm derived values and actiing as templates */
  $rawSourceSystem := "Shopify";
  $rawSourceTimeZone := "Europe/London";
  $rawEventId := null; /*  TODO: 'id' for an event is the id, but sample is resource only so far*/
  $rawEventName := null;
  $rawEventNameList := [ /* Full lookup list and mappings can expect for 'Order' events from shopify with XF mappings*/
    {"systemEventName": "placed",                "xfuzeEventName": "SalesOrderPlaced"},
    {"systemEventName": "updated",               "xfuzeEventName": "SalesOrderUpdated"},
    {"systemEventName": "authorization_failure", "xfuzeEventName": "SalesOrderPaymentAuthFailed"},
    {"systemEventName": "authorization_pending", "xfuzeEventName": "SalesOrderPaymentAuthPending"},
    {"systemEventName": "authorization_success", "xfuzeEventName": "SalesOrderPaymentAuthSucceded"},
    {"systemEventName": "cancelled",             "xfuzeEventName": "SalesOrderCancelled"},
    {"systemEventName": "capture_failure",       "xfuzeEventName": "SalesOrderPaymentFailed"},
    {"systemEventName": "capture_pending",       "xfuzeEventName": "SalesOrderPaymentPending"},
    {"systemEventName": "capture_success",       "xfuzeEventName": "SalesOrderPaid"},
    {"systemEventName": "closed",                "xfuzeEventName": "SalesOrderClosed"},
    {"systemEventName": "re_opened",             "xfuzeEventName": "SalesOrderReopened"},
    {"systemEventName": "confirmed",             "xfuzeEventName": "SalesOrderAccepted"},
    {"systemEventName": "ReturnRefund_cancelled", "xfuzeEventName": "SalesOrderItemsFulfilmentCancelled"},
    {"systemEventName": "ReturnRefund_pending",   "xfuzeEventName": "SalesOrderItemsFulfilmentPending"},
    {"systemEventName": "ReturnRefund_success",   "xfuzeEventName": "SalesOrderItemsFulfilled"},
    {"systemEventName": "refund_failure",        "xfuzeEventName": "SalesOrderRefundFailed"},
    {"systemEventName": "refund_pending",        "xfuzeEventName": "SalesOrderRefundPending"},
    {"systemEventName": "refund_success",        "xfuzeEventName": "SalesOrderRefunded"},
    {"systemEventName": "restock_line_items",    "xfuzeEventName": "SalesOrderItemsRefunded"},
    {"systemEventName": "sale_failure",          "xfuzeEventName": "SalesOrderPaymentFailed"}, /*  TODO: whats diff to capture*/
    {"systemEventName": "sale_pending",          "xfuzeEventName": "SalesOrderPaymentPending"},
    {"systemEventName": "sale_success",          "xfuzeEventName": "SalesOrderPaid"},
    {"systemEventName": "void_failure",          "xfuzeEventName": "SalesOrderVoidFailed"},
    {"systemEventName": "void_pending",          "xfuzeEventName": "SalesOrderVoidPending"},
    {"systemEventName": "void_success",          "xfuzeEventName": "SalesOrderVoided"}    
  ];
  /* Lookup func for above */
  $rawEventXrefFn := function($rawName) {
    $rawEventNameList[systemEventName = $trim($rawName)].xfuzeEventName
  };

  $rawEntityId := $cleanStr(id); /* TODO: also 'subject_id' on the event*/
  $rawEntityType := NULL;  /* TODO: 'subject_type' on the event */
  $rawParentEntityId := (customer.id != null ? $cleanStr(customer.id) : NULL);
  $rawEntityPartyId := (customer.id != null ? $cleanStr(customer.id) : NULL);
  $rawEntityCustomerId := (customer.id != null ? $cleanStr(customer.id) : NULL);
  $rawEntitySalesStaffId := (customer.id != null ? $cleanStr(user_id) : NULL);
  $rawLocationId := (loction_id != null ? $cleanStr(loction_id) : NULL);
  $rawEntityLastUpdatedOn := updated_at;
  $rawEntityCreatedOn := created_at;
  /* Raw but mapped for derived event metadata usage */
  $rawEventOccurredTimestamp := updated_at;  /* clean update timestamp best for true world ordering. Not UTC yet */
  $rawEventProcessedTimestamp := null;     /* EPT is only set when centrally processed by event processors */
  $rawEventReceivedTimestamp := null;      /* noth*/
  $clientCode := "RND";
  /* ------------ END OF RAW INPUT DATA ------------ */

  
  /* ------------ START OF XFUZE COMMON DERIVED CONSTS & BASE FIELDS ------------ */

  /* Xfuze common event and entity constants used in derived mappings*/
  $event_eventCategory := "Shipment";
  $event_entityType := "SalesOrder";
  $event_defaultEventVerb := "Published"; 
  $event_eventValueStream := "Order2Cash";
  $event_eventType:= "TriggerEvent";
  $event_eventPriority:= "5";

  $entity_entityTypeHeader := "SalesOrder_Header" ;
  $entity_entityIdType := "System"; /* system mappings at this stage by connectors not merged xfuze*/


  /* Xfuze event and entity derived values */
  $event_eventName := ($rawEventName = null ? $event_entityType &  $event_defaultEventVerb : $rawEventName); /* convert to Xfuze eventName?*/
  $event_entityId := ($event_entityType & "_" & $rawSourceSystem & "_" & $rawEntityId);
  $event_parentEntityId := $entity_entityTypeCustomer  & "_" & $rawSourceSystem & "_" & $rawEntityCustomerId; /* Customer is parent of order*/
  $event_eventOccurredType = "TrueTime";
  $event_eventOccurredLocalTimeZone = $rawSourceTimeZone;
  $event_eventOccurredTimestamp := ($rawEventOccurredTimestamp = null ? $rawEventReceivedTimestamp : $rawEventOccurredTimestamp);
  $event_eventProcessedTimestamp := ($rawEventOccurredTimestamp = null ? $rawEventReceivedTimestamp : $rawEventOccurredTimestamp);
  $event_eventReceivedTimestamp := ($rawEventOccurredTimestamp = null ? $rawEventReceivedTimestamp : $rawEventOccurredTimestamp);
  $event_eventId := $event_eventName & "_" & $event_entityId & "_" & $event_eventOccurredTimestamp;  
 
  /* ------------ END OF XFUZE COMMON DERIVED CONSTS & BASE FIELDS ------------ */
  
  /* ------------ START OF XFUZE ENTITY SPECIFIC DERIVED CONSTS & BASE FIELDS ------------ */
  
  $orderIds_orderId := $event_entityId;
  $orderIds_headerId := $entity_entityTypeHeader & "_" & $rawSourceSystem & "_" & $rawEntityId;
  $partyIds_customerId := $entity_entityTypeCustomer  & "_" & $rawSourceSystem & "_" & $rawEntityCustomerId;
  $attMetadata_asOf := $event_eventOccurredTimestamp;

  /* Xfuze SalesOrder derived 'functions */


  /* $qtys_qtyCancelledFn - Cancelled is an update in place so needs to compare adjacent events to derive*/

  /* common Xfuze funcs*/
  $getDateDimFn := function($dt,$isUTC,$tz) { /* TODO: make this really precise depending on local or UTC */
    { 
          "DateId": $fromMillis($toMillis($dt),"[Y0001][M01][D01]"),
          "TimestampUTC": (isUTC ? $dt : NULL), /* TODO convert to utc*/
          "DateUTC": (isUTC ? $dt : NULL), /* TODO convert to date */
          "TimeZone": ($tz != null ? $tz : $rawSourceTimeZone),
          "DateTimeLocal": $fromMillis($toMillis($dt)),
          "DateLocal": $fromMillis($toMillis($dt),"[Y0001]-[M01]-[D01]"),
          "HourId": $fromMillis($toMillis($dt),"[H01]"),
          "Millis": $toMillis($dt)
    }
  };

$entity_entityIdType := "System"; /* system mappings at this stage by connectors not merged xfuze*/
$entity_salesOrder_entityCode := "SalesOrder";
$entity_salesOrder_entityId := $buildEntityID($entity_salesOrder_entityCode, $rawSourceSystem, $rawEntityId);
$entity_salesOrder_header_entityCode := "SalesOrder.Header";
$entity_salesOrder_header_entityId := $buildEntityID($entity_salesOrder_header_entityCode, $rawSourceSystem, $rawEntityId);
$entity_salesOrder_line_entityCode := "SalesOrder.Lines";
$entity_party_customer_entityCode := "PartyRole.Customer";
$entity_party_customer_entityId := $buildEntityID($entity_party_customer_entityCode, $rawSourceSystem, $rawEntityCustomerId);
$entity_product_base_entityCode := "Product.Base";
$entity_product_variant_entityCode := "Product.Variant";


/* ------------ END OF XFUZE ENTITY SPECIFIC DERIVED CONSTS & BASE FIELDS ------------ */

/* ------------ START OF XFUZE ENTITY SPECIFIC DERIVED CONSTS & BASE FIELDS ------------ */

{
  "SalesOrderEvent": {
    "TriggerEntity": {
      "OrderId": $orderIds_orderId,
      "EntityType" : "SalesOrder.Lines",
      "Lines": refunds#$i[].(
        {
          "LineId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "ReturnRefund",$string(id)), 
          "LineSeq" : $i+1,
          "HeaderId": $entity_salesOrder_header_entityId,
          "OrderId:": $entity_salesOrder_entityId,
          "CustomerId": $entity_party_customer_entityId,
          "ProductId": NULL,
          "Type" : { 
            "ClassCode": "Return",
            "TypeCode": "Lines.Type.ReturnRefund",
            "TypeDesc": "Refund Line", 
            "SubTypeCode": NULL,
            "SubTypeDesc": NULL,
            "AttMetadata": {
                "RawChangeTrackingHash": NULL, /* TODO */
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": NULL /* No source atts*/
              }
          },          
          "LineIds": [
            {
              "Id": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "ReturnRefund",$string(id)), /* also is order_id*/
              "RawId": $string(id),
              "Type": "System",
              "Code": "Lines.ReturnRefund.LineIds",
              "Name": "LineId",
              "Desc": "Global, Unique LineId in the canonical format",

              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL,
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf,
                "EventId": $event_eventId,
                "RawSourceAtts": NULL
              }
            }
          ],
          "PartyIds": [ 
            {
              "Id": "PartyRole_OrderRefunder_" & $string(user_id),
              "RawId": $string(user_id),
              "Code": "Lines.ReturnRefund.PartyIds.OrderRefunder",
              "Name": "PartyIds.OrderRefunder",
              "Desc": "Global, Unique Party Id in the canonical format for the refunder/user of the order",

              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL,
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf,
                "EventId": $event_eventId,
                "RawSourceAtts": NULL
              }
            }
          ],
          "ProductIds":  NULL,
          "Status": [
            {
              "StatusId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Status.RefundStatus",""),
              "StatusType": "Native",
              "StatusCode": "Lines.ReturnRefund.Status.RefundStatus",
              "StatusValue" : (processed_at != null ? "Refunded" : "Pending"),
              "StatusDesc": "Line Return Refund Status - possible values are ....",
              "SubStatusCode": NULL,
              "SubStatusDesc": NULL,
              "SeqNo": NULL,
              "ReasonCode": NULL,
              "ReasonDesc": NULL,
              "StatusURL": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.processed_at",
                    "RawSourceVal": $string(processed_at)
                  }
                ]
              }
            }
          ],
          "Times": [
            {
              "TimeId": $buildAttributeID($orderIds_headerId, "Lines.ReturnRefund.Times.CreatedOn",""),
              "TimeCode": "Lines.ReturnRefund.Times.CreatedOn",
              "TimeDesc": "Native source timestamp when the order return refund was created in source system - Local Timezone",
              "DateDim": $getDateDimFn(created_at,true),
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.created_at",
                    "RawSourceVal": $string(created_at)
                  }
                ]
              }
            },
            {
              "TimeId": $buildAttributeID($orderIds_headerId, "Lines.ReturnRefund.Times.ProcessedOn",""),
              "TimeCode": "Lines.ReturnRefund.Times.ProcessedOn",
              "TimeDesc": "Native source timestamp when the order return refund was processed by the payments system - Local Timezone",
              "DateDim": $getDateDimFn(processed_at,true),
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.processed_at",
                    "RawSourceVal": $string(processed_at)
                  }
                ]
              }
            },
            {
              "TimeId": $buildAttributeID($orderIds_headerId, "Lines.ReturnRefund.Times.AuthExpiresOn",""),
              "TimeCode": "Lines.ReturnRefund.Times.AuthExpiresOn",
              "TimeDesc": "Native source timestamp when the order return refund auth expires at - (UTC)",
              "DateDim": $getDateDimFn(authorization_expires_at,true),
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.processed_at",
                    "RawSourceVal": $string(authorization_expires_at)
                  }
                ]
              }
            },
            {
              "TimeId": $buildAttributeID($orderIds_headerId, "Lines.ReturnRefund.Times.StandardAuthExpiresOn",""),
              "TimeCode": "Lines.ReturnRefund.Times.StandardAuthExpiresOn",
              "TimeDesc": "Native source timestamp when the order return refund auth expires at - (UTC)",
              "DateDim": $getDateDimFn(extended_authorization_attributes.standard_authorization_expires_at,true),
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.extended_authorization_attributes.standard_authorization_expires_at",
                    "RawSourceVal": $string(extended_authorization_attributes.standard_authorization_expires_at)
                  }
                ]
              }
            },  
            {
              "TimeId": $buildAttributeID($orderIds_headerId, "Lines.ReturnRefund.Times.ExtendedAuthExpiresOn",""),
              "TimeCode": "Lines.ReturnRefund.Times.ExtendedAuthExpiresOn",
              "TimeDesc": "Native source timestamp when the order return refund auth expires at - (UTC)",
              "DateDim": $getDateDimFn(extended_authorization_attributes.extended_authorization_expires_at,true),
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "refunds.extended_authorization_attributes.extended_authorization_expires_at",
                    "RawSourceVal": $string(extended_authorization_attributes.extended_authorization_expires_at)
                  }
                ]
              }
            }                                                 
          ],
          "ProductAtts": NULL,
          "Qtys": NULL,
          "Prices": NULL,
          "Totals": [
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.RefundTotal.CurrentBCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.RefundTotal.CurrentBCY",
              "PriceName": "RefundTotal",
              "PriceDesc": "Current Line Refund Total (BASE Currency)  - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "BCY",
              "PriceIncTax": $sum(transactions.($number(amount))), /* assume all refunds in same currency (local?)*/
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": transactions[0].currency, /* assumes ame currency so use first elements */
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "+Retractions",
              "ExchangeRate": 1.0,
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "price_set.shop_money",
                    "RawSourceVal": $string(price_set.shop_money)
                  }
                ]
              }
            },
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.LineSubTotalBeforeDiscounts.CurrentLCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.LineSubTotalBeforeDiscounts.CurrentLCY",
              "PriceName": "LineSubTotalBeforeDiscounts",
              "PriceDesc": "Current Line SubTotal (Shipment) (LOCAL Currency) BEFORE discounts - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "LCY",
              "PriceIncTax": $number(price_set.presentment_money.amount),
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": $cleanStr(price_set.presentment_money.currency_code),
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "+Retractions",
              "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "price_set.presentment_money",
                    "RawSourceVal": $string(price_set.presentment_money)
                  }
                ]
              }
            },
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.LineTotalDiscounts.CurrentBCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.LineTotalDiscounts.CurrentBCY",
              "PriceName": "LineTotalDiscounts",
              "PriceDesc": "Current Line Total Discounts (Shipment)  (BASE Currency) - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "BCY",
              "PriceIncTax": -1.0 * ($number(price_set.shop_money.amount) - $number(discounted_price_set.shop_money.amount)),
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": $cleanStr(price_set.shop_money.currency_code),
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "-Retractions",
              "ExchangeRate": 1.0,
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "price_set.shop_money",
                    "RawSourceVal": $string(price_set.shop_money)
                  }
                ]
              }
            },
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.LineSubTotalBeforeDiscounts.CurrentLCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.LineTotalDiscounts.CurrentLCY",
              "PriceName": "LineTotalDiscounts",
              "PriceDesc": "Current Line Total Discounts (Shipment) (LOCAL Currency) - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "LCY",
              "PriceIncTax": -1.0 * ($number(price_set.presentment_money.amount) - $number(discounted_price_set.presentment_money.amount)),
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": $cleanStr(price_set.presentment_money.currency_code),
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "-Retractions",
              "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "price_set.presentment_money",
                    "RawSourceVal": $string(price_set.presentment_money)
                  }
                ]
              }
            },
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.LineSubTotalAfterDiscounts.CurrentBCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.LineSubTotalAfterDiscounts.CurrentBCY",
              "PriceName": "LineSubTotalAfterDiscounts",
              "PriceDesc": "Current Line Sub Total (Shipment) (BASE Currency) AFTER discounts - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "BCY",
              "PriceIncTax": -1.0 * $number(discounted_price_set.shop_money.amount),
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": $cleanStr(discounted_price_set.shop_money.currency_code),
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "+Retractions",
              "ExchangeRate": 1.0,
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "discounted_price_set.shop_money",
                    "RawSourceVal": $string(discounted_price_set.shop_money)
                  }
                ]
              }
            },
            {
              "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefund.Totals.LineSubTotalAfterDiscounts.CurrentLCY",""), 
              "PriceType": "Shipment",
              "PriceCode": "Lines.ReturnRefund.Totals.LineSubTotalAfterDiscounts.CurrentLCY",
              "PriceDesc": "Current Line Sub Total (Shipment) (LOCAL Currency) AFTER discounts - at Current (relative) Event time",
              "PriceTimeClass": "CurrentPrice",
              "PriceLocalisation": "LCY",
              "PriceIncTax": -1.0 * $number(discounted_price_set.presentment_money.amount),
              "PriceExTax": NULL,
              "PriceTax": NULL,
              "CurrencyCode": $cleanStr(discounted_price_set.presentment_money.currency_code),
              "TaxRate": NULL,
              "IsTaxRateEstimated": $stringBool(estimated_taxes), 
              "TaxRateCode": NULL,
              "AccountingMethodType": "-Retractions",
              "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
              "ExchangeRateHistoryId": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "discounted_price_set.presentment_money",
                    "RawSourceVal": $string(discounted_price_set.presentment_money)
                  }
                ]
              }
            }
          ],
          "Taxes" : tax_lines#$d[].(
            {
              "Title" : $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.Taxes",""),
              "IsChannelLiable" : $stringBool(channel_liable),
              "TaxRate" : rate,
              "TaxAmounts" : [
                {
                  "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.Taxes.TaxAmount.CurrentBCY",""), 
                  "PriceType": "Shipment",
                  "PriceCode": "Lines.Taxes.TaxAmount.CurrentBCY",
                  "PriceDesc": "Current Line Sales Tax Amount (BASE Currency) - at Current (relative) Event time",
                  "PriceTimeClass": "CurrentPrice",
                  "PriceLocalisation": "BCY",
                  "PriceIncTax": $number(price_set.shop_money.amount),
                  "PriceExTax": NULL,
                  "PriceTax": NULL,
                  "CurrencyCode": $cleanStr(price_set.shop_money.currency_code),
                  "TaxRate": NULL,
                  "IsTaxRateEstimated": $stringBool(estimated_taxes), 
                  "TaxRateCode": NULL,
                  "AccountingMethodType": "+Retractions",
                  "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
                  "ExchangeRateHistoryId": NULL,
                  "AttMetadata": {
                    "RawChangeTrackingHash": NULL,
                    "IsEncrypted": NULL, /* Assumed N*/
                    "SecuringKeyId": NULL,
                    "AsOf": $attMetadata_asOf, 
                    "EventId": $event_eventId,
                    "RawSourceAtts": [
                      {
                        "RawSourceSystem": $rawSourceSystem,
                        "RawSourceId": "shop_money.presentment_money",
                        "RawSourceVal": $string(shop_money.presentment_money)
                      }
                    ]
                  }
                },
                {
                  "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.Taxes.TaxAmount.CurrentLCY",""), 
                  "PriceType": "Shipment",
                  "PriceCode": "Lines.Taxes.TaxAmount.CurrentLCY",
                  "PriceDesc": "Current Line Sales Tax Amount (LOCAL Currency) - at Current (relative) Event time",
                  "PriceTimeClass": "CurrentPrice",
                  "PriceLocalisation": "LCY",
                  "PriceIncTax": $number(price_set.presentment_money.amount),
                  "PriceExTax": NULL,
                  "PriceTax": NULL,
                  "CurrencyCode": $cleanStr(price_set.presentment_money.currency_code),
                  "TaxRate": NULL,
                  "IsTaxRateEstimated": $stringBool(estimated_taxes), 
                  "TaxRateCode": NULL,
                  "AccountingMethodType": "+Retractions",
                  "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
                  "ExchangeRateHistoryId": NULL,
                  "AttMetadata": {
                    "RawChangeTrackingHash": NULL,
                    "IsEncrypted": NULL, /* Assumed N*/
                    "SecuringKeyId": NULL,
                    "AsOf": $attMetadata_asOf, 
                    "EventId": $event_eventId,
                    "RawSourceAtts": [
                      {
                        "RawSourceSystem": $rawSourceSystem,
                        "RawSourceId": "price_set.presentment_money",
                        "RawSourceVal": $string(price_set.presentment_money)
                      }
                    ]
                  }
                } 
              ]
            }
          ),
          "Duties" : duties#$d[].(
            {
              "DutyId" : $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), id & "_" & "Lines.Duties",""),
              "SystemCode" : $cleanStr(harmonized_system_code),
              "CountryCodeOfOrigin": $cleanStr(country_code_of_origin),
              "TotalDuty" : [
                {
                  "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.ReturnRefund.Totals.TotalDuty.CurrentLCY",""), 
                  "PriceType": "Shipment",
                  "PriceCode": "Lines.ReturnRefund.Totals.TotalDuty.CurrentLCY",
                  "PriceDesc": "Current Line Total Duty (LOCAL Currency) - at Current (relative) Event time",
                  "PriceTimeClass": "CurrentPrice",
                  "PriceLocalisation": "LCY",
                  "PriceIncTax": $number(presentment_money.amount),
                  "PriceExTax": NULL,
                  "PriceTax": NULL,
                  "CurrencyCode": $cleanStr(presentment_money.currency_code),
                  "TaxRate": NULL,
                  "IsTaxRateEstimated": $stringBool(estimated_taxes), 
                  "TaxRateCode": NULL,
                  "AccountingMethodType": "+Retractions",
                  "ExchangeRate": $number(presentment_money.amount) / $number(shop_money.amount),
                  "ExchangeRateHistoryId": NULL,
                  "AttMetadata": {
                    "RawChangeTrackingHash": NULL,
                    "IsEncrypted": NULL, /* Assumed N*/
                    "SecuringKeyId": NULL,
                    "AsOf": $attMetadata_asOf, 
                    "EventId": $event_eventId,
                    "RawSourceAtts": [
                      {
                        "RawSourceSystem": $rawSourceSystem,
                        "RawSourceId": "duties.presentment_money",
                        "RawSourceVal": $string(presentment_money)
                      }
                    ]
                  }
                } 
              ],
              "Taxes" : tax_lines#$dt[].(
                {
                "Title" : title,
                "IsChannelLiable" : $stringBool(channel_liable),
                "TaxRate" : rate,
                "TaxAmounts" : [
                  {
                    "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.Duties.Taxes.TaxAmount.CurrentBCY",""), 
                    "PriceType": "Shipment",
                    "PriceCode": "Lines.Duties.Taxes.TaxAmount.CurrentBCY",
                    "PriceDesc": "Current Line Duties Sales Tax Amount (BASE Currency) - at Current (relative) Event time",
                    "PriceTimeClass": "CurrentPrice",
                    "PriceLocalisation": "BCY",
                    "PriceIncTax": $number(price_set.shop_money.amount),
                    "PriceExTax": NULL,
                    "PriceTax": NULL,
                    "CurrencyCode": $cleanStr(price_set.shop_money.currency_code),
                    "TaxRate": NULL,
                    "IsTaxRateEstimated": $stringBool(estimated_taxes), 
                    "TaxRateCode": NULL,
                    "AccountingMethodType": "+Retractions",
                    "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
                    "ExchangeRateHistoryId": NULL,
                    "AttMetadata": {
                      "RawChangeTrackingHash": NULL,
                      "IsEncrypted": NULL, /* Assumed N*/
                      "SecuringKeyId": NULL,
                      "AsOf": $attMetadata_asOf, 
                      "EventId": $event_eventId,
                      "RawSourceAtts": [
                        {
                          "RawSourceSystem": $rawSourceSystem,
                          "RawSourceId": "shop_money.presentment_money",
                          "RawSourceVal": $string(shop_money.presentment_money)
                        }
                      ]
                    }
                  },
                  {
                    "PriceId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(%.id)), "Lines.Duties.Taxes.TaxAmount.CurrentLCY",""), 
                    "PriceType": "Shipment",
                    "PriceCode": "Lines.Taxes.Duties.TaxAmount.CurrentLCY",
                    "PriceDesc": "Current Line Duties Sales Tax Amount (LOCAL Currency) - at Current (relative) Event time",
                    "PriceTimeClass": "CurrentPrice",
                    "PriceLocalisation": "LCY",
                    "PriceIncTax": $number(price_set.presentment_money.amount),
                    "PriceExTax": NULL,
                    "PriceTax": NULL,
                    "CurrencyCode": $cleanStr(price_set.presentment_money.currency_code),
                    "TaxRate": NULL,
                    "IsTaxRateEstimated": $stringBool(estimated_taxes), 
                    "TaxRateCode": NULL,
                    "AccountingMethodType": "+Retractions",
                    "ExchangeRate": $number(price_set.presentment_money.amount) / $number(price_set.shop_money.amount),
                    "ExchangeRateHistoryId": NULL,
                    "AttMetadata": {
                      "RawChangeTrackingHash": NULL,
                      "IsEncrypted": NULL, /* Assumed N*/
                      "SecuringKeyId": NULL,
                      "AsOf": $attMetadata_asOf, 
                      "EventId": $event_eventId,
                      "RawSourceAtts": [
                        {
                          "RawSourceSystem": $rawSourceSystem,
                          "RawSourceId": "price_set.presentment_money",
                          "RawSourceVal": $string(price_set.presentment_money)
                        }
                      ]
                    }
                  }
                ]
              } 
            )
            }
          ),
    
          "FulfilmentAtts": [
            {
              "AttId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.ReturnRefundAtts",""),
              "AttCode": "Lines.ReturnRefundAtts",
              "AttDesc": "Line Fulfilment Attributes",
              "IsArray": "Y",
              "AttType": NULL,
              "AttValue": NULL,
              "AttValues": [
                {
                  "Type": "STRING",
                  "ValKey": "ReturnRefundService",
                  "Value": $cleanStr(ReturnRefund_service),
                  "IsEncrypted": "N",
                  "IsSensitive": "N"
                },
                {
                  "Type": "STRING",
                  "ValKey": "IsShippingRequired",
                  "Value": $stringBool(requires_shipping),
                  "IsEncrypted": "N",
                  "IsSensitive": "N"
                },
                {
                  "Type": "STRING",
                  "ValKey": "VariantInventoryManagement",
                  "Value": $cleanStr(variant_inventory_management),
                  "IsEncrypted": "N",
                  "IsSensitive": "N"
                }
              ],
              "AttMetadata": {
                "RawChangeTrackingHash": NULL, 
                "IsEncrypted": "N", 
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "line_items.ReturnRefund_service",
                    "RawSourceVal": $string(ReturnRefund_service)
                  },
                   {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "line_items.requires_shipping",
                    "RawSourceVal": $string(requires_shipping)
                  },
                   {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "line_items.variant_inventory_management",
                    "RawSourceVal": $string(variant_inventory_management)
                  }
                ]
              }
            }
          ],

          "FinanceAtts": [
            {
              "AttId": $buildAttributeID($buildEntityID($entity_salesOrder_line_entityCode, $rawSourceSystem, $string(id)), "Lines.FinanceAtts",""),
              "AttCode": "Lines.FinanceAtts.IsTaxable",
              "AttDesc": "Line Financial Attributes",
              "IsArray": "N",
              "AttType": "STRING",
              "AttValue": $stringBool(taxable),
              "AttValues": NULL,
              "AttMetadata": {
                "RawChangeTrackingHash": NULL, 
                "IsEncrypted": "N", 
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "line_items.taxable",
                    "RawSourceVal": $string(taxable)
                  }
                ]
              }
            }
          ],
          "EntityLinks": [ /* TODO: EntityLinks?*/
            {
              "LinkId": "dolore reprehenderit minim ut",
              "LinkType": "amet laboris eu",
              "LinkCode": "in consequat",
              "FromEntityId": "irure",
              "ToEntityId": "laboris do sunt consequat",
              "LinkStatus": "non aute id nulla quis",
              "LinkName": "laborum mollit incididunt",
              "AttMetadata": {
                "RawChangeTrackingHash": NULL,
                "IsEncrypted": NULL, /* Assumed N*/
                "SecuringKeyId": NULL,
                "AsOf": $attMetadata_asOf, 
                "EventId": $event_eventId,
                "RawSourceAtts": [
                  {
                    "RawSourceSystem": $rawSourceSystem,
                    "RawSourceId": "sed",
                    "RawSourceVal": "velit commodo ut"
                  }
              ]
            }
          }
        ],
        "CustomAtts": NULL
        }
      )
    }
  }
}

)